{"version":3,"sources":["background/loading.gif","shared/constants.js","components/Time.jsx","components/GetDate.jsx","components/Home.jsx","components/Error.jsx","components/Graph1.jsx","components/TempMap.jsx","components/HoursForcast.jsx","components/DayWeather.jsx","components/Footer.jsx","components/ForcastHome.jsx","shared/Sort.js","components/Apex.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","monthsArray","dayArray","Time","props","updateTime","setState","time","Date","state","bind","this","timerId","setInterval","clearInterval","className","toLocaleTimeString","Component","GetDate","dateObj","year","getFullYear","monthNUm","getMonth","monthAlph","dayNum","getDay","dayAlph","console","log","Home","handleChange","e","copyData","data","target","id","value","helpManual","window","alert","handleSubmit","preventDefault","city","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","country","getDaysWeather","days","onSubmit","onClick","htmlFor","style","color","fontSize","onChange","disabled","selected","name","styles","bounceInLeft","animation","animationName","Radium","keyframes","Error","margin","date","d","dt_txt","ny","main","sf","Theshold","xScale","scaleTime","domain","Math","min","map","max","yScale","scaleLinear","nice","xMax","yMax","range","width","height","x","y","fill","rx","Group","left","top","GridRows","scale","stroke","GridColumns","x1","x2","y1","y2","AxisBottom","numTicks","AxisLeft","transform","Threshold","y0","clipAboveTo","clipBelowTo","curve","curveBasis","belowAreaProps","fillOpacity","aboveAreaProps","LinePath","strokeWidth","strokeOpacity","strokeDasharray","bounceInUp","withRouter","dayTag","match","params","bounceInRight","mapId","dayForcast","daysForcast","split","dt","key","rid_day","src","weather","icon","alt","wind","class","history","push","start","dayAlpha","handleHours","checkDayId","Footer","ForcastHome","onPressAction","slideUp","current","scrollIntoView","behavior","block","hourPassedData","rIdAll","rId","rIdDay","getDayArray","list","genData","idRegistry","filter","obj","React","createRef","ref","population","to","path","exact","genDays","tag","sorter","dateExtract","hourWeather","dateSetUp","Set","dateArray","dayZero","dayOne","dayTwo","dayThree","dayFour","dayFive","Apex","handleScrollup","scrollup","payload","filled","scrollDown","axios","get","then","response","arrangedData","copyData2","slice","catch","err","forcastView","foot","loading","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c3472d3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.1d7626e6.gif\";","const monthsArray = ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'];\nconst dayArray = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY']\n\n\n\nexport { monthsArray, dayArray };","import React, { Component } from 'react'\n\nexport default class Time extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date()\n    }\n    this.updateTime = this.updateTime.bind(this);\n  };\n\n  //UPDATE THE STATE TIME TO THE CURRENT TIME\n  updateTime = () => {\n    this.setState({\n      time: new Date()\n    })\n  }\n\n  //SET ONE SECOND INTEVAL TO SET STATE TO CURRENT TIME\n  componentDidMount() {\n    this.timerId = setInterval(() => { this.updateTime() }, 1000)\n  }\n\n  //CLEAR THE INITIAL SET STATE CALLED INTERVALLY TO AVOID RECURSSION\n  componentWillUnmount() {\n    clearInterval(this.timerId)\n  }\n\n\n  render() {\n    return (\n      <div className=\"clock\">\n        {this.state.time.toLocaleTimeString()}\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\n\n\nimport { monthsArray, dayArray } from '../shared/constants'\nimport Time from './Time'\n\n\n//DATE CALCULATOR AND UI\nexport default function GetDate() {\n\n\n  const dateObj = new Date();\n  const year = dateObj.getFullYear();\n  const monthNUm = dateObj.getMonth();\n  const monthAlph = monthsArray[monthNUm]\n  const dayNum = dateObj.getDay();\n  const dayAlph = dayArray[dayNum]\n  console.log(dateObj)\n\n\n\n\n  return (\n    <div className=\"get_date\">\n      <div><Time /></div>\n      <div>{dayAlph}</div>\n      <div>{monthAlph}</div>\n      <div>{year}</div>\n\n\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport '../styles/home.css'\nimport 'animate.css';\nimport GetDate from './GetDate'\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                country: \"\",\n                city: \"\",\n                state: \"\",\n                days: \"\",\n            }\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n\n    handleChange = (e) => {\n        const copyData = { ...this.state.data };\n        copyData[e.target.id] = e.target.value;\n        this.setState({\n            data: copyData\n        });\n\n    }\n\n    helpManual = () =>{\n        window.alert(`\n        \nTHIS APPLICATION FORCAST WEATHER BASED ON YOUR SET OPTIONS\n\n ONLY THE CITY FIELD IS COMPULSORY.\n\n\n    -ITS COUNTRY IS DEFAULTED TO NIGERIA\n    YOU CAN SET THE COUNTRY IN THE OPTION\n                \n    -ITS RETURN NUMBER OF DAYS IS DEFAULTED TO 5\n        YOU CAN SET THE RETURN NUMBER OF DAYS \n\n    -IT FINDS COMPATIBLE STATE TO MATCH THE COUNTRY.\n        YOU CAN SET THE STATE IN THE OPTION\n        \n        \n        \n        `)\n       \n        \n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.data.city === \"\") {\n            store.addNotification({\n                title: \" The City Can't Be empty\",\n                message: \"What Do I search For? Fill THe City To Continue\",\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-right\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                    duration: 6000,\n                    onScreen: true\n                }\n            });\n\n        } else {\n            if (this.state.data.state === \"\" || this.state.data.country=== \"\") {\n                store.addNotification({\n                    title: \" You Can Be More Specific\",\n                    message: \"Completing the Address inputs gives you a better results\",\n                    type: \"info\",\n                    insert: \"top\",\n                    container: \"top-right\",\n                    animationIn: [\"animated\", \"fadeIn\"],\n                    animationOut: [\"animated\", \"fadeOut\"],\n                    dismiss: {\n                        duration: 6000,\n                        onScreen: true\n                    }\n                });\n    \n\n\n            }\n        console.log(this.state)\n\n\n    this.props.getDaysWeather(this.state.data)\n\n        const copyData = { ...this.state.data };\n        copyData.city = \"\";\n        copyData.country = \"\";\n        copyData.state = \"\";\n        copyData.days = \"\";\n\n        this.setState({\n            data: copyData\n        })\n\n    }\n    }\n\n    render() {\n        return (\n            <div className=\"home\" >\n                <form onSubmit={this.handleSubmit}>\n                <div onClick={this.helpManual} className=\"help\" title=\"HELP\">\n                <i className=\"material-icons\">help</i>\n                </div>\n                    <h1>WEATHER CHECK</h1>\n                    <div>\n                        <GetDate />\n                    </div>\n                    <div className=\"form_inputs\">\n                        <div className=\"input-field col s6\">\n                            <label htmlFor=\"city\">ENTER CITY <sup style={{ color: '#f00', fontSize: '1.2em' }}>*</sup></label>\n                            <input type=\"text\" id=\"city\" onChange={this.handleChange} value={this.state.data.city} />\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <label htmlFor=\"state\">ENTER STATE</label>\n                            <input type=\"text\" id=\"state\" onChange={this.handleChange} value={this.state.data.state} />\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <label htmlFor=\"country\">ENTER COUNTRY</label>\n                            <input type=\"text\" id=\"country\" onChange={this.handleChange} value={this.state.data.country} />\n                        </div> \n                    </div>\n                    <div>\n                    <select className=\"browser-default\" id=\"days\" onChange={this.handleChange} value={this.state.data.days}>\n                        <option value=\"\" disabled selected>NUMBER OF DAYS</option>\n                        <option value=\"1\"> 1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\"> 3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        \n                    </select>\n                    </div>\n\n                    <div className=\"input-field col s12\">\n                    <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\n                        CHECK\n                         <i className=\"material-icons right\">send</i>\n                    </button>\n                    </div>\n                </form> \n            </div>\n            \n        )\n    }\n}\n","import React from 'react';\nimport { bounceInLeft } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\n\nimport '../styles/error.css'\n\n\n\nconst styles = {\n    bounceInLeft: {\n        animation: 'x 1s',\n        animationName: Radium.keyframes(bounceInLeft, 'bounceInLeft')\n    }\n}\n\n\n// 404 page\nconst Error = () => {\n    return (\n        <StyleRoot>\n            <div className=\"error\" style={styles.bounceInLeft}>\n                <h2  >SORRY THE REQUESTED PAGE DO NOT EXIST</h2>\n                <h4>Use The Arrow Button Above To Go To The Forcast Results</h4>\n            </div>\n        </StyleRoot>\n    );\n}\n\nexport default Error;\n","import React from 'react';\nimport { Group } from '@vx/group';\nimport { curveBasis } from '@vx/curve';\nimport { LinePath } from '@vx/shape';\nimport { Threshold } from '@vx/threshold';\nimport { scaleTime, scaleLinear } from '@vx/scale';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\nimport { GridRows, GridColumns } from '@vx/grid';\n\n\n\n\n\n\nconst width = 750;\nconst height = 500;\n\nconst margin = {\n  top: 60,\n  bottom: 60,\n  left: 80,\n  right: 80,\n};\n\n\n\n//CREATE FUNCTIONS TO MAP DATA \nconst date = d => new Date(d.dt_txt);\nconst ny = d => d.main['temp_max'];\nconst sf = d => d.main['temp_min'] - 1;\n\n\n\n\nexport default function Theshold({ data }) {\n\n\n\n  // SCALES\n  const xScale = scaleTime({\n    domain: [Math.min(...data.map(date)), Math.max(...data.map(date))]\n  });\n  const yScale = scaleLinear({\n    domain: [\n      Math.min(...data.map(d => Math.min(ny(d), sf(d)))),\n      Math.max(...data.map(d => Math.max(ny(d), sf(d))))\n    ],\n    nice: true\n  });\n\n  // BOUNDS\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        <rect x={0} y={0} width={width} height={height} fill=\"#f3f3f3\" rx={14} />\n        <Group left={margin.left} top={margin.top}>\n          <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n          <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n          <line x1={xMax} x2={xMax} y1={0} y2={yMax} stroke=\"#e0e0e0\" />\n          <AxisBottom top={yMax} scale={xScale} numTicks={width > 520 ? 10 : 5} />\n          <AxisLeft scale={yScale} />\n          <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n            Temperature (°K)\n          </text>\n          <Threshold\n            data={data}\n            x={d => xScale(date(d))}\n            y0={d => yScale(ny(d))}\n            y1={d => yScale(sf(d))}\n            clipAboveTo={0}\n            clipBelowTo={yMax}\n            curve={curveBasis}\n            belowAreaProps={{\n              fill: 'green',\n              fillOpacity: 0.4\n            }}\n            aboveAreaProps={{\n              fill: 'red',\n              fillOpacity: 0.4\n            }}\n          />\n          <LinePath\n            data={data}\n            curve={curveBasis}\n            x={d => xScale(date(d))}\n            y={d => yScale(ny(d))}\n            stroke=\"#000\"\n            strokeWidth={1.5}\n          />\n          <LinePath\n            data={data}\n            curve={curveBasis}\n            x={d => xScale(date(d))}\n            y={d => yScale(sf(d))}\n            stroke=\"#000\"\n            strokeWidth={1.5}\n            strokeOpacity={0.8}\n            strokeDasharray=\"1,2\"\n          />\n        </Group>\n      </svg>\n    </div>\n  );\n}\n\n","import React from 'react';\n\nimport Graph1 from './Graph1'\nimport { withRouter } from 'react-router-dom'\n\nimport '../styles/graph.css'\nimport { bounceInUp } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\n\n\nconst styles = {\n  bounceInUp: {\n    animation: 'x 1s',\n    animationName: Radium.keyframes(bounceInUp, 'bounceInUp')\n  }\n}\n\n\n\n\nconst TempMap = (props) => {\n\n  let dayTag;\n\n  if (props.match.params.id) { dayTag = (<p>{props.match.params.id}</p>) } else { dayTag = (<p>Days: Five</p>) }\n\n  return (\n    <StyleRoot>\n      <div className=\"graph_root\" style={styles.bounceInUp} >\n        <h4 style={{ color: 'rgb(137,138,137)' }} >{props['tag']} TEMPERATURE GRAPH</h4>\n        <div className=\"g_cov\" style={{ color: 'rgb(137,138,137)' }}>\n          <p>Max_Temp: Solid Line</p>\n          {dayTag}\n          <p>Min_Temp: Dotted Lines</p>\n        </div>\n        <Graph1 data={props.data} />\n      </div>\n    </StyleRoot>\n  );\n}\n\nexport default withRouter(TempMap);\n","\nimport React from 'react';\nimport { bounceInRight } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\nimport { withRouter } from 'react-router-dom'\n\nimport '../styles/day_weather.css'\n\nconst styles = {\n    bounceInRight: {\n        animation: 'x 1s',\n        animationName: Radium.keyframes(bounceInRight, 'bounceInRight')\n    }\n}\n\n\n\n//OUTPUT HOURS FORCAST IN CARD\n\nconst HoursForcast = (props) => {\n\n\n    let mapId = \"\"\n\n\n    //PUSH TO THE DISTINCT DATE MAP ROUTE\n    const handleHoursMap = e => {\n        props.history.push('/hours_temp_Graph/' + e.target.id)\n    }\n\n    const dayForcast = props.daysForcast.map((dayForcast) => {\n\n        mapId = dayForcast.dt_txt.split(' ')[0]\n        console.log(dayForcast.dt)\n        return (\n            <div key={dayForcast.dt} className=\"card_cover\"  >\n                <div >\n                    <h5 className=\"card_title\">{props.rid_day}</h5>\n                    <div className=\"card_tittle_cover\">\n                        <h5 className=\"card_title_dt\">DATE</h5>\n                        <h5 className=\"card_title_d\">{dayForcast.dt_txt.split(\" \")[0]}</h5>\n                    </div>\n                    <div className=\"card_tittle_cover\">\n                        <h5 className=\"card_title_dt\">Time</h5>\n                        <h5 className=\"card_title_d\">{dayForcast.dt_txt.split(\" \")[1]}</h5>\n                    </div>\n                </div>\n                <div className=\"card_image\">\n                    <img src={\"https://openweathermap.org/img/w/\" + dayForcast.weather[0].icon + \".png\"} alt=\"\" className=\"w_icon\" />\n                </div>\n                <div className=\"card_content\">\n                    <div>\n                        <span>\n                            <p>MAX TEMP:</p>\n                            <p>{dayForcast.main['temp_max']}K</p>\n                        </span>\n                        <span>\n                            <p>MIN TEMP:</p>\n                            <p>{dayForcast.main['temp_min']}K</p>\n                        </span>\n                        <span>\n                            <p>GROUND LVL:</p>\n                            <p>{dayForcast.main['grnd_level']}</p>\n                        </span>\n\n                        <span>\n                            <p>WEATHER:</p>\n                            <p>{dayForcast.weather[0]['main']}</p>\n                        </span>\n                        <span >\n                            <p>DESCRIPTION:</p>\n                            <p >{dayForcast.weather[0]['description']}</p>\n                        </span>\n                    </div>\n                    <div>\n                        <span>\n                            <p>SEA LvL:</p>\n                            <p>{dayForcast.main['sea_level']}</p>\n                        </span>\n\n                        <span>\n                            <p>Pressure:</p>\n                            <p>{dayForcast.main['temp_min']}hPa</p>\n                        </span>\n                        <span>\n                            <p>Humidity:</p>\n                            <p>{dayForcast.main['humidity']}%</p>\n                        </span>\n                        <span>\n                            <p>Wind Speed:</p>\n                            <p>{dayForcast.wind['speed']}m/s</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n\n    });\n\n\n\n    return (\n        <StyleRoot>\n            <div className=\"hour_head\">\n                <div className=\"h_btn\">\n                    <h5>HOURS FORCAST</h5>\n                    <i class=\" material-icons bntgraph\" onClick={handleHoursMap} id={mapId} title=\"VIEW HOURS TEMP GRAPH\" >insert_chart</i>\n                </div>\n                <div className='day_weather' style={styles.bounceInRight}>\n                    {dayForcast}\n                </div>\n            </div>\n        </StyleRoot>\n    );\n}\n\nexport default withRouter(HoursForcast);\n\n\n\n\n\n","import React from 'react';\nimport { dayArray } from '../shared/constants'\nimport '../styles/day_weather.css'\nimport { withRouter } from 'react-router-dom'\n\n\n\n\nimport { bounceInUp } from 'react-animations';\nimport Radium, { StyleRoot } from 'radium';\n\n\nconst styles = {\n    bounceInUp: {\n        animation: 'x 1s',\n        animationName: Radium.keyframes(bounceInUp, 'bounceInUp')\n    }\n}\n\n\n\n//OUT PUT THE FORCAST IN CARDS\n\nconst DayWeather = (props) => {\n\n    const dateObj = new Date();\n    let start = dateObj.getDay()\n    let dayAlpha = \"\"\n\n\n    //PASS DATA THE CLICKED DAY ID UP\n    //PUSH TO THE HOURS ROUTE\n    const handleHours = (e) => {\n        props.checkDayId(e.target.id)\n        props.history.push('/hours_Forcast/' + e.target.id.split(\"/\")[0].split(\" \")[0])\n    }\n\n\n\n    \n    //LOOP TROUGH DATA TO RETURN THE CARD ARRAY\n    //CONVERT DATE TO WORDS WHILE LOOPING\n\n    const dayForcast = props.daysForcast.map((dayForcast) => {\n        let dNum = start\n\n        dayAlpha = dayArray[dNum]\n        start++\n        if (start === 6) {\n            start = 0\n        };\n\n        return (\n            <div key={dayForcast.dt} className=\"card_cover\"  >\n                <i className=\" green material-icons bntgraph\" onClick={handleHours} id={dayForcast.dt_txt + \"/\" + dayAlpha} title=\"HOURS FORCAST FOR THE DAY\" >arrow_forward</i>\n                <div >\n                    <h5 className=\"card_title\">{dayAlpha}</h5>\n                    <div className=\"card_tittle_cover\">\n                        <h5 className=\"card_title_dt\">DATE</h5>\n                        <h5 className=\"card_title_d\">{dayForcast.dt_txt.split(\" \")[0]}</h5>\n                    </div>\n                    <div className=\"card_tittle_cover\">\n                        <h5 className=\"card_title_dt\">Time</h5>\n                        <h5 className=\"card_title_d\">{dayForcast.dt_txt.split(\" \")[1]}</h5>\n                    </div>\n                </div>\n                <div className=\"card_image\">\n                    <img src={\"https://openweathermap.org/img/w/\" + dayForcast.weather[0].icon + \".png\"} alt=\"\" className=\"w_icon\" />\n                </div>\n                <div className=\"card_content\">\n                    <div>\n                        <span>\n                            <p>MAX TEMP:</p>\n                            <p>{dayForcast.main['temp_max']}K</p>\n                        </span>\n                        <span>\n                            <p>MIN TEMP:</p>\n                            <p>{dayForcast.main['temp_min']}K</p>\n                        </span>\n                        <span>\n                            <p>GROUND LVL:</p>\n                            <p>{dayForcast.main['grnd_level']}</p>\n                        </span>\n\n                        <span>\n                            <p>WEATHER:</p>\n                            <p>{dayForcast.weather[0]['main']}</p>\n                        </span>\n                        <span >\n                            <p>DESCRIPTION:</p>\n                            <p >{dayForcast.weather[0]['description']}</p>\n                        </span>\n                    </div>\n                    <div>\n                        <span>\n                            <p>SEA LvL:</p>\n                            <p>{dayForcast.main['sea_level']}</p>\n                        </span>\n\n                        <span>\n                            <p>Pressure:</p>\n                            <p>{dayForcast.main['temp_min']}hPa</p>\n                        </span>\n                        <span>\n                            <p>Humidity:</p>\n                            <p>{dayForcast.main['humidity']}%</p>\n                        </span>\n                        <span>\n                            <p>Wind Speed:</p>\n                            <p>{dayForcast.wind['speed']}m/s</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n\n    });\n\n\n\n    return (\n        <StyleRoot>\n            <div className='day_weather' style={styles.bounceInUp}>\n                {dayForcast}\n            </div>\n        </StyleRoot>\n    );\n}\n\nexport default withRouter(DayWeather);\n","import React from 'react'\nimport '../styles/footer.css'\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <p>HucksApp &copy; CopyWright 2020</p>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom'\n\n\nimport Error from './Error';\nimport TempMap from './TempMap';\nimport HoursForcast from './HoursForcast'\nimport DayWeather from './DayWeather'\nimport '../styles/forcast.css'\nimport Footer from './Footer'\n\n\n\n\nclass ForcastHome extends Component {\n\n    //INITIALIZE\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: {\n                dayArray: [],\n                rIdDay: \"\"\n            }\n        }\n        this.slideUp = React.createRef();\n\n        this.hourPassedData = this.hourPassedData.bind(this);\n\n\n    }\n\n\n    //SCROLL VIEW\n\n    onPressAction = () => {\n        this.slideUp.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\",\n            duration: \"5000\"\n        })\n    };\n\n\n\n    //BRING IN THE CLICKED HOUR ID AND CHECK DATA TO SET NEW ARRAY OF RELATIONS\n    //SET ARRAY IN STATE TO BE PASSED DOWN TO HOURS VIEW\n\n    hourPassedData = (rIdAll) => {\n\n        const rId = rIdAll.split(\"/\")[0]\n        const rIdDay = rIdAll.split(\"/\")[1]\n\n        const getDayArray = this.props.list.genData.idRegistry.list.filter((obj) => {\n\n            return obj.dt_txt.split(\" \")[0] === rId.split(\" \")[0]\n        })\n\n\n        const copyData = { ...this.state.data };\n        copyData.dayArray = getDayArray;\n        copyData.rIdDay = rIdDay;\n\n        this.setState({\n            data: copyData\n        });\n\n\n    }\n\n\n\n\n\n    render() {\n\n        return (\n            <BrowserRouter>\n                <div className=\"forcast\" ref={this.slideUp} >\n                    <div className=\"heading\">\n                        <p><span>CITY</span><span>{this.props.list.genData.city}</span></p>\n                        <p><span>COUNTRY</span><span>{this.props.list.genData.country}</span></p>\n                        <p><span>POPULATION</span><span>{this.props.list.genData.population}</span></p>\n                        <Link to=\"/days_temp_Graph\"> <i class=\"medium material-icons bntgraph\" title=\"VIEW WEEK TEMP GRAPH\" >insert_chart</i></Link>\n                        <Link to=\"/\"> <i class=\"medium material-icons bntgraph\" title=\"BACK TO HOME\" >arrow_back</i></Link>\n                    </div >\n\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <DayWeather checkDayId={this.hourPassedData} daysForcast={this.props.list.genDays} />\n                        </Route>\n                        <Route path=\"/hours_Forcast/:id\" exact>\n                            <HoursForcast daysForcast={this.state.data.dayArray} rid_day={this.state.data.rIdDay} />\n                        </Route>\n                        <Route path=\"/days_temp_Graph\" exact>\n                            <TempMap data={this.props.list.genData.idRegistry.list} tag={\"A WEEK\"} />\n                        </Route>\n                        <Route path=\"/hours_temp_Graph/:id\" exact>\n                            <TempMap data={this.state.data.dayArray}\n                                tag={this.state.data.rIdDay}\n                            />\n                        </Route>\n                        <Route  >\n                            <Error path=\"*\" />\n                        </Route>\n                    </Switch>\n\n\n                    <p class=\"btn-floating btn-large pulse\" onClick={this.onPressAction}><i className=\"material-icons\">arrow_upward</i></p>\n                    <Footer />\n\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default ForcastHome;\n","\n\nconst sorter = (data) => {\n\n\n  //EXTRACT THE DATE -EXLUDE THE TIME\n  const dateExtract = data.list.map(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0]\n  });\n  \n  //REMOVE DUBLICATION AND CREATE A NEW ARRAY REGISTRY\n  const dateSetUp = new Set(dateExtract);\n  const dateArray = [...dateSetUp];\n\n\n// GROUP ARRAYS RELATION TO THE REGISTRY\n  const dayZero = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[0]\n  });\n\n  const dayOne = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[1]\n  });\n\n\n  const dayTwo = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[2]\n  });\n  \n  const dayThree = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[3]\n  });\n\n  const dayFour = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[4]\n  });\n\n  const dayFive = data.list.filter(hourWeather => {\n    return hourWeather.dt_txt.split(\" \")[0] === dateArray[5]\n  });\n\n\n\n//RETURN THE DATA OBJECT SORTED\n  return {\n\n    genData: {\n\n      city: data.city['name'],\n      country: data.city['country'],\n      population: data.city['population'],\n      idRegistry: data\n    },\n    genDays: [\n      dayZero[0], dayOne[0], dayTwo[0], dayThree[0], dayFour[0], dayFive[0]\n\n    ],\n\n    dayZero,\n    dayOne,\n    dayTwo,\n    dayThree,\n    dayFour\n\n\n  }\n\n}\n\n\n\nexport default sorter;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport '../styles/home.css'\nimport 'animate.css';\n\nimport Home from './Home';\nimport '../styles/apex.css'\nimport ForecastHome from './ForcastHome'\nimport Footer from './Footer'\nimport loading from '../background/loading.gif'\n\nimport sorter from '../shared/Sort'\n\n\nclass Apex extends Component {\n\n    //INITIALISE CLASS PROPERTY AND METHOD\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                filled: false,\n                arrangedData: \"\"\n\n            }\n        }\n        this.scrollDown = React.createRef();\n        this.scrollup = React.createRef();\n    }\n\n\n    //VIEW POSITIONS SROLL\n\n    handleScrollup = () => {\n        this.scrollup.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\",\n            duration: \"5000\"\n        })\n    }\n\n\n\n    //BRING IN PAYLOAD FROM FORM\n    //CHECK FILLED FIELD AND SET EMPTY TO DEFAULT\n    //FETCH DATA RELATED TO GIVEN QUERY\n    //BRING IN SORTER TO RE-ARRANGE RESPONSE DATA\n    //FILTER THE REQUIRED DAYS NEED AND STORE IN STATE\n    //CHECK IF DATA HAS RETURN TO TOGGLE BETWEEN VIEWS\n\n    getDaysWeather = (payload) => {\n\n        const city = payload.city;\n        let country;\n        let days;\n        let state;\n\n        if (payload.country === \"\") {\n            country = \"NG\";\n\n        } else {\n            country = payload.country;\n        };\n\n        if (payload.state === \"\") {\n            state = \"Lagos\";\n\n\n        } else {\n            state = payload.state;\n        };\n        if (payload.days === \"\") {\n            days = 5;\n\n\n        } else {\n            days = payload.days;\n        };\n\n\n\n        const copyData = { ...this.state.data }\n        copyData.filled = true;\n        this.setState({\n            data: copyData\n        }, () => {\n\n\n            this.scrollDown.current.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"start\",\n                duration: \"5000\"\n            });\n\n\n            axios.get('https://api.openweathermap.org/data/2.5/forecast?q=' + city + ',' + state + ',' + country + '&appid=a40c698729d41a0ff59b01fed9b87d45')\n                .then((response) => {\n\n                    const arrangedData = sorter(response.data, days)\n                    let copyData2 = { ...this.state.data };\n                    arrangedData.genDays = arrangedData.genDays.slice(0, days);\n\n                    copyData2.arrangedData = arrangedData;\n                    this.setState({\n                        data: copyData2\n                    });\n\n                })\n                .catch(err => {\n\n                    store.addNotification({\n                        title: \" BAD LOCATION ENTRY\",\n                        message: \"Your Location Entry Is In Wrong Format Or Combination, Try Again With Different Combinations \",\n                        type: \"danger\",\n                        insert: \"top\",\n                        container: \"top-right\",\n                        animationIn: [\"animated\", \"fadeIn\"],\n                        animationOut: [\"animated\", \"fadeOut\"],\n                        dismiss: {\n                            duration: 6000,\n                            onScreen: true\n                        }\n                    });\n\n                    console.log(err)\n                });\n\n\n        })\n\n\n    }\n    render() {\n        let forcastView = \"\";\n        let foot = \"\"\n        if (this.state.data.filled === false) {\n            forcastView = (\n                <div className=\"contain_b\">\n                    <div className=\"inlet\">\n                        <p>IF YOU NEED HELP GETING ARROUND, CLICK ON THE RIGHT TOP HELP ICON</p>\n                        <p>FILL THE OPTIONS TO GET STARTED</p>\n                    </div>\n                    <p className=\"btn-floating btn-large pulse\" onClick={this.handleScrollup}><i className=\"material-icons\">arrow_upward</i></p>\n\n                </div>\n\n            );\n            foot = (<Footer />)\n        } else if (this.state.data.filled === true && this.state.data.arrangedData === \"\") {\n            forcastView = (\n                <div className=\"contain_l\">\n                    <img src={loading} alt=\"Loading......\" />\n                </div>\n\n            );\n            foot = (<Footer />)\n\n        } else if (this.state.data.filled === true && this.state.data.arrangedData !== \"\") {\n            forcastView = (\n\n                <ForecastHome list={this.state.data.arrangedData} />\n            );\n            foot = (<p></p>)\n        }\n\n\n\n        return (\n            <div ref={this.scrollup}>\n                <Home getDaysWeather={this.getDaysWeather} />\n                <div ref={this.scrollDown} className=\"b_cover\">\n                    {forcastView}\n                </div>\n                {foot}\n            </div>\n        );\n    }\n}\n\nexport default Apex;\n","import React from 'react';\nimport './App.css';\n\nimport Apex from '../src/components/Apex'\n\nimport ReactNotifications from 'react-notifications-component';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      < ReactNotifications />\n     <Apex />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}